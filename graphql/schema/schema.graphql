type Account {
  id: Int!
  address: String!
  email: String!
  createdAt: Datetime!
  updatedAt: Datetime!
  postCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PostFilter

    """Sort order to apply to the collection"""
    orderBy: [PostOrderBy!]
  ): PostConnection
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

type AccountDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Account!]!
}

type AccountEdge {
  cursor: String!
  node: Account
}

input AccountFilter {
  id: IntFilter
  address: StringFilter
  email: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
}

input AccountInsertInput {
  address: String
  email: String
  createdAt: Datetime
  updatedAt: Datetime
}

type AccountInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Account!]!
}

input AccountOrderBy {
  id: OrderByDirection
  address: OrderByDirection
  email: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

input AccountUpdateInput {
  address: String
  email: String
  createdAt: Datetime
  updatedAt: Datetime
}

type AccountUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Account!]!
}

scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
  neq: JSON
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the collection"""
  deleteFromAccountCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: AccountFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): AccountDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromPostCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: PostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromPostNftCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: PostNftFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostNftDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromProfileCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: ProfileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ProfileDeleteResponse!

  """Adds one or more `AccountInsertResponse` records to the collection"""
  insertIntoAccountCollection(objects: [AccountInsertInput!]!): AccountInsertResponse

  """Adds one or more `PostInsertResponse` records to the collection"""
  insertIntoPostCollection(objects: [PostInsertInput!]!): PostInsertResponse

  """Adds one or more `PostNftInsertResponse` records to the collection"""
  insertIntoPostNftCollection(objects: [PostNftInsertInput!]!): PostNftInsertResponse

  """Adds one or more `ProfileInsertResponse` records to the collection"""
  insertIntoProfileCollection(objects: [ProfileInsertInput!]!): ProfileInsertResponse

  """Updates zero or more records in the collection"""
  updateAccountCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: AccountUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: AccountFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): AccountUpdateResponse!

  """Updates zero or more records in the collection"""
  updatePostCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PostUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: PostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostUpdateResponse!

  """Updates zero or more records in the collection"""
  updatePostNftCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PostNftUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: PostNftFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostNftUpdateResponse!

  """Updates zero or more records in the collection"""
  updateProfileCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProfileUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: ProfileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ProfileUpdateResponse!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  id: Int!
  ownerId: Int!
  title: String!
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!
  owner: Account
  postNftCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PostNftFilter

    """Sort order to apply to the collection"""
    orderBy: [PostNftOrderBy!]
  ): PostNftConnection
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

type PostEdge {
  cursor: String!
  node: Post
}

input PostFilter {
  id: IntFilter
  ownerId: IntFilter
  title: StringFilter
  description: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
}

input PostInsertInput {
  ownerId: Int
  title: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

type PostInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

type PostNft {
  id: UUID!
  postId: Int!
  title: String!
  media: String
  mediaHash: String
  mediaType: String
  totalcharged: Float
  extra: String
  status: String!
  createdAt: Datetime!
  updatedAt: Datetime!
  post: Post
}

type PostNftConnection {
  edges: [PostNftEdge!]!
  pageInfo: PageInfo!
}

type PostNftDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PostNft!]!
}

type PostNftEdge {
  cursor: String!
  node: PostNft
}

input PostNftFilter {
  id: UUIDFilter
  postId: IntFilter
  title: StringFilter
  media: StringFilter
  mediaHash: StringFilter
  mediaType: StringFilter
  totalcharged: FloatFilter
  extra: StringFilter
  status: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
}

input PostNftInsertInput {
  id: UUID
  postId: Int
  title: String
  media: String
  mediaHash: String
  mediaType: String
  totalcharged: Float
  extra: String
  status: String
  createdAt: Datetime
  updatedAt: Datetime
}

type PostNftInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PostNft!]!
}

input PostNftOrderBy {
  id: OrderByDirection
  postId: OrderByDirection
  title: OrderByDirection
  media: OrderByDirection
  mediaHash: OrderByDirection
  mediaType: OrderByDirection
  totalcharged: OrderByDirection
  extra: OrderByDirection
  status: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

enum PostNftStatus {
  PENDING
  POSTED
}

input PostNftUpdateInput {
  id: UUID
  postId: Int
  title: String
  media: String
  mediaHash: String
  mediaType: String
  totalcharged: Float
  extra: String
  status: String
  createdAt: Datetime
  updatedAt: Datetime
}

type PostNftUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PostNft!]!
}

input PostOrderBy {
  id: OrderByDirection
  ownerId: OrderByDirection
  title: OrderByDirection
  description: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

input PostUpdateInput {
  ownerId: Int
  title: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

type PostUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

type Profile {
  id: Int!
  hobbys: String
  tokenId: String!
  username: String
  fullname: String
  aboutMe: String
  city: String
  country: String
  avatarUrl: String
  extra: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type ProfileConnection {
  edges: [ProfileEdge!]!
  pageInfo: PageInfo!
}

type ProfileDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Profile!]!
}

type ProfileEdge {
  cursor: String!
  node: Profile
}

input ProfileFilter {
  id: IntFilter
  hobbys: StringFilter
  tokenId: StringFilter
  username: StringFilter
  fullname: StringFilter
  aboutMe: StringFilter
  city: StringFilter
  country: StringFilter
  avatarUrl: StringFilter
  extra: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
}

input ProfileInsertInput {
  hobbys: String
  tokenId: String
  username: String
  fullname: String
  aboutMe: String
  city: String
  country: String
  avatarUrl: String
  extra: String
  createdAt: Datetime
  updatedAt: Datetime
}

type ProfileInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Profile!]!
}

input ProfileOrderBy {
  id: OrderByDirection
  hobbys: OrderByDirection
  tokenId: OrderByDirection
  username: OrderByDirection
  fullname: OrderByDirection
  aboutMe: OrderByDirection
  city: OrderByDirection
  country: OrderByDirection
  avatarUrl: OrderByDirection
  extra: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

input ProfileUpdateInput {
  hobbys: String
  tokenId: String
  username: String
  fullname: String
  aboutMe: String
  city: String
  country: String
  avatarUrl: String
  extra: String
  createdAt: Datetime
  updatedAt: Datetime
}

type ProfileUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Profile!]!
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `Account`"""
  accountCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: AccountFilter

    """Sort order to apply to the collection"""
    orderBy: [AccountOrderBy!]
  ): AccountConnection

  """A pagable collection of type `Post`"""
  postCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PostFilter

    """Sort order to apply to the collection"""
    orderBy: [PostOrderBy!]
  ): PostConnection

  """A pagable collection of type `PostNft`"""
  postNftCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PostNftFilter

    """Sort order to apply to the collection"""
    orderBy: [PostNftOrderBy!]
  ): PostNftConnection

  """A pagable collection of type `Profile`"""
  profileCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProfileFilter

    """Sort order to apply to the collection"""
    orderBy: [ProfileOrderBy!]
  ): ProfileConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  neq: UUID
}